<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mcl on purpleidea.com</title>
    <link>https://purpleidea.com/tags/mcl/</link>
    <description>Recent content in Mcl on purpleidea.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-ca</language>
    <lastBuildDate>Fri, 26 Jul 2019 06:35:00 -0400</lastBuildDate>
    
	<atom:link href="https://purpleidea.com/tags/mcl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mgmt Configuration Language: Class and Include</title>
      <link>https://purpleidea.com/blog/2019/07/26/class-and-include-in-mgmt/</link>
      <pubDate>Fri, 26 Jul 2019 06:35:00 -0400</pubDate>
      
      <guid>https://purpleidea.com/blog/2019/07/26/class-and-include-in-mgmt/</guid>
      <description>It&amp;rsquo;s been a little over a year since I introduced the Mgmt Configuration Language. A lot has happened since then, and I&amp;rsquo;d like to introduce some of the missing features that weren&amp;rsquo;t available when the language was first introduced. If you haven&amp;rsquo;t already read that post, please start there and come back when you&amp;rsquo;re finished. In this article we&amp;rsquo;ll learn about classes.
Classes:
You might remember that the mgmt language called mcl has both statements, and expressions.</description>
    </item>
    
    <item>
      <title>Mgmt Configuration Language</title>
      <link>https://purpleidea.com/blog/2018/02/05/mgmt-configuration-language/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://purpleidea.com/blog/2018/02/05/mgmt-configuration-language/</guid>
      <description>Mgmt has given us a lot of great features, demos, and insight into how infrastructure automation should be managed. Unfortunately it wasn&amp;rsquo;t a complete tool yet, because it was missing a crucial piece for its completeness. That all changes today with the addition of: the language.

 An ideal language allows us to express easily what is useful for the programming task, and at the same time makes it difficult to write what leads to incomprehensible or incorrect programs.</description>
    </item>
    
  </channel>
</rss>